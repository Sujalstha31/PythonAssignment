# -*- coding: utf-8 -*-
"""assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L5prSpjt25WWC8PYEbbXu07OjmAV9g4w
"""

#Q 1
class Vehicle:
    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
      # Initialize instance variables
        self.name_of_vehicle = name_of_vehicle
        self.max_speed = max_speed
        self.average_of_vehicle = average_of_vehicle

#Q2
class Car(Vehicle):
    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
      # Call the constructor of the parent class (Vehicle)
        super().__init__(name_of_vehicle, max_speed, average_of_vehicle)
    def seating_capacity(self, capacity):
      # Return a formatted string with vehicle name and seating capacity
        return f"{self.name_of_vehicle} has a seating capacity of {capacity}."

#Q3
#When we inherited from different class is to a class it is called multiple inheritance
class ParentClass1:
    def method1(self):
        print("Method 1 from ParentClass1")

class ParentClass2:
    def method2(self):
        print("Method 2 from ParentClass2")

class ChildClass(ParentClass1, ParentClass2):
    def method3(self):
        print("Method 3 from Child")

# Create an instance of Child and demonstrate multiple inheritance
child = ChildClass()
child.method1()  # Calls method from ParentClass1
child.method2()  # Calls method from ParentClass2
child.method3()  # Calls method from Child

#Q4
# Task 1: Create a Python Class
class Person:
    def __init__(self, name, age, gender):
        # Initialize properties
        self.__name = name  # Encapsulation: age property is private
        self.__age = age    # Encapsulation: age property is private
        self.gender = gender

    def say_hello(self):
        return (f"Hello, my name is {self.__name}.")

    def is_adult(self):
        if self.__age >= "18":
            return True
        else:
            return False

    # Encapsulation: Create a method to access the age property
    def get_age(self):
        return self.__age

#test for task 1
person = Person("Sujal","19","Male")
print(person.say_hello())
print(person.is_adult())




# Task 2: Implement Inheritance
class Student(Person):
    def __init__(self, name, age, gender, student_id, course):
        # Call the constructor of the parent class (Person)
        super().__init__(name, age, gender)
        self.student_id = student_id
        self.course = course

    def studentInformation(self):
        print(f"Student ID: {self.student_id}")
        print(f"Name: {self._Person__name}")  # Accessing private property using name mangling
        print(f"Age: {self.get_age()}")  # Accessing age using the encapsulated method
        print(f"Gender: {self.gender}")
        print(f"Course: {self.course}")
#test for task 2
    student = Student("Sujal", 20, "Male", "C0874338", "PythonII")
    student.say_hello()
    student.studentInformation()


#Task 3: Implement Polymorphism
class Teacher(Person):
    def __init__(self, name, age, gender, teacher_id, subject):
        # Call the constructor of the parent class (Person)
        super().__init__(name, age, gender)
        self.teacher_id = teacher_id
        self.subject = subject

    # making the say_hello() different from the person and student class
    #overriding the method
    def say_hello(self):
        return(f"Hello, I am {self._Person__name}, and I am {self.subject} teacher.")

    #test for task 3
    teacher = Teacher("Ishant", 30, "Male", "2023F-T2_CSD 4523_01", "Python")
    print(teacher.say_hello())

